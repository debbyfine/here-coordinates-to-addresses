{"version":3,"sources":["logo.svg","DragDrop.js","PostionsList.js","Map.js","DragDropPage.js","App.js","reportWebVitals.js","index.js"],"names":["DragDrop","dropRef","React","createRef","state","dragging","emptyList","handleDrag","e","preventDefault","stopPropagation","handleDragIn","dragCounter","dataTransfer","items","length","setState","handleDragOut","handleDrop","files","props","clearData","this","div","current","addEventListener","removeEventListener","ref","style","display","position","width","height","className","border","backgroundColor","top","bottom","left","right","zIndex","textAlign","color","fontSize","children","Component","PositionsList","restApiKey","positions","positionList","file","type","text","then","dataJson","JSON","parse","pos","coordinatesToAddress","Latitude","Longitude","address","name","Name","latitude","longitude","push","changedPositions","console","error","message","lat","long","url","Promise","resolve","reject","fetch","response","json","data","title","map","i","Map","mapRef","ui","newPositions","removeObjects","getObjects","markers","marker","window","H","Marker","lng","setData","createMap","group","Group","addObject","evt","information","InfoBubble","target","getGeometry","content","getData","addBubble","defaultLayers","service","Platform","apikey","createDefaultLayers","vector","normal","center","zoom","pixelRatio","devicePixelRatio","mapevents","Behavior","MapEvents","UI","createDefault","dispose","DragDropPage","positionsList","child","changePositions","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.114cdccc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\n\n/**\n * @author Tina LÃ¼the\n * DragDrop Component, which contains and handles the drag and drop functionality.\n */\nclass DragDrop extends Component {\n    // reference for a container\n    dropRef = React.createRef();\n    // state, that contains two states\n    state = {\n        dragging: false,\n        emptyList: true\n    };\n\n    /**\n     * Callback function to handle the events called when being dragged.\n     * @param e\n     */\n    handleDrag = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    };\n\n    /**\n     * Callback function to handle the events, if something is being dragged in.\n     * @param e\n     */\n    handleDragIn = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.dragCounter++;\n        if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n            this.setState({dragging: true, emptyList: true});\n        }\n    };\n\n    /**\n     * Callback function to handle the events, if something is dragged out of the div.\n     * @param e\n     */\n    handleDragOut = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.dragCounter--;\n        if (this.dragCounter > 0) return;\n        this.setState({dragging: false, emptyList: true});\n    };\n\n    /**\n     * Callback function to handle events, if something was dropped inside div.\n     * @param e\n     */\n    handleDrop = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.setState({dragging: false, emptyList: false});\n        if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n            this.props.handleDrop(e.dataTransfer.files);\n            e.dataTransfer.clearData();\n            this.dragCounter = 0;\n        }\n    };\n\n    /**\n     * Function, which is called when component has been mount. Sets event listeners and variables.\n     */\n    componentDidMount() {\n        this.dragCounter = 0;\n        let div = this.dropRef.current;\n        div.addEventListener('dragenter', this.handleDragIn);\n        div.addEventListener('dragleave', this.handleDragOut);\n        div.addEventListener('dragover', this.handleDrag);\n        div.addEventListener('drop', this.handleDrop);\n    }\n\n    /**\n     * Function, which is called when the component is going to be unmount. Removes all event listeners.\n     */\n    componentWillUnmount() {\n        let div = this.dropRef.current;\n        div.removeEventListener('dragenter', this.handleDragIn);\n        div.removeEventListener('dragleave', this.handleDragOut);\n        div.removeEventListener('dragover', this.handleDrag);\n        div.removeEventListener('drop', this.handleDrop);\n    }\n\n    /**\n     * Function which renders the HTML elements.\n     * @returns {*}\n     */\n    render() {\n        return (\n            <div ref={this.dropRef} style={{\n                display: 'inline-block',\n                position: 'relative',\n                width: '100%',\n                height: '100%'\n            }}>\n                {this.state.emptyList &&\n                <div className=\"drop-container-border\" style={{\n                    border: 'dashed grey 4px',\n                    backgroundColor: 'rgba(255,255,255,.8)',\n                    position: 'absolute',\n                    top: 0,\n                    bottom: 0,\n                    left: 0,\n                    right: 0,\n                    zIndex: 9999}}>\n                    <div style={{\n                        position: 'absolute',\n                        top: '25%',\n                        right: 0,\n                        left: 0,\n                        textAlign: 'center',\n                        color: 'grey',\n                        fontSize: 36}}>\n                        <div>drop a file with coordinates here</div>\n                    </div>\n                </div>\n                }\n                {this.props.children}\n            </div>\n        )\n    }\n}\nexport default DragDrop","import React, { Component } from 'react'\nimport DragDrop from './DragDrop'\n\n/**\n * @author Tina LÃ¼the\n * Map Component which handles the whole list with positions functionality.\n */\nclass PositionsList extends Component {\n    // hardcoded API key\n    restApiKey = \"kfu3Jby7KkRNhy2wgQcUofppTXl_Mj1wuVcIe6Otpi8\";\n\n    // state which contains array of all positions\n    state = {\n        positions: []\n    };\n\n    /**\n     * Callback Function which handles the event, when a file has been dropped. It reads out the file, gets the\n     * addresses from the REST Service and creates new objects to use them in the list.\n     * @param files\n     */\n    handleDrop = (files) => {\n        //create empty list and set to state\n        let positionList = [];\n        this.setState({positions: positionList});\n        // read out every file dropped\n        for (const file of files) {\n            // check file type\n            if (!file.type) return;\n            if (file.type === \"application/json\") {\n                file.text().then((text) => {\n                    try {\n                        // turn text into JSON format\n                        const dataJson = JSON.parse(text);\n                        // for each position get the address\n                        for (const pos of dataJson) {\n                            this.coordinatesToAddress(pos.Latitude, pos.Longitude).then((address) => {\n                                // create new object\n                                const position = {\n                                    name: pos.Name,\n                                    latitude: pos.Latitude,\n                                    longitude: pos.Longitude,\n                                    address: address\n                                };\n                                // add object to list, update state\n                                positionList.push(position);\n                                this.setState({positions: positionList});\n                                this.props.changedPositions(positionList);\n                            });\n                        }\n                    } catch (e) {\n                        console.error(e.message());\n                    }\n                });\n            }\n        }\n    };\n\n    /**\n     * Function which gets the address from a position with the REST Service of HERE Technologies.\n     * @param lat\n     * @param long\n     * @returns {Promise<any>}\n     */\n    coordinatesToAddress(lat, long) {\n        const url = 'https://revgeocode.search.hereapi.com/v1/revgeocode?at=' + lat + '%2C' + long + '&lang=en-US&apikey=' + this.restApiKey;\n        return new Promise(function (resolve, reject) {\n            fetch(url)\n                .then(response => response.json())\n                .then((data) => {\n                    // return Promise with address\n                    resolve(data.items[0].title);\n                });\n        });\n    }\n\n    /**\n     * Function which renders the HTML elements.\n     * @returns {*}\n     */\n    render() {\n        return (\n            <DragDrop handleDrop={this.handleDrop}>\n                    <div className=\"list\">\n                        <ol className=\"positions-list\">\n                            {this.state.positions && this.state.positions.map((position, i) =>\n                                <li key={i}>\n                                    <h4><b>{position.name}</b></h4>\n                                    <p>{position.address}</p>\n                                </li>\n                            )}\n                        </ol>\n                    </div>\n            </DragDrop>\n        )\n    }\n}\nexport default PositionsList","// src/DisplayMapClass.js\nimport * as React from 'react';\n\n/**\n * @author Tina LÃ¼the\n * Map Component which handles the whole Map functionality.\n */\nexport class Map extends React.Component {\n    //reference for the map\n    mapRef = React.createRef();\n\n    /**\n     * Constructor which gets props and sets the state.\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            map: null,\n            ui: null\n        }\n    }\n\n    /**\n     * Function, which is called when a file with new positions was dropped. It removes old markers and creates new\n     * ones.\n     * @param newPositions\n     */\n    changePositions(newPositions) {\n        // get map and remove the markers\n        let map = this.state.map;\n        if (map != null) {\n            map.removeObjects(map.getObjects());\n        }\n\n        // create new markers from the positions\n        let markers = [];\n        for (const pos of newPositions) {\n            const marker = new window.H.map.Marker({lat:pos.latitude, lng:pos.longitude});\n            // set data to name, so it can be accessed for more information\n            marker.setData('<div>' + pos.name + '</div>');\n            markers.push(marker);\n        }\n        // add markers to the map\n        this.createMap(markers);\n    }\n\n    /**\n     * Function which sets the markers to the map.\n     * @param markers\n     */\n    createMap(markers) {\n        // get existing map and ui\n        const map = this.state.map;\n        const ui = this.state.ui;\n        // create new group\n        let group = new window.H.map.Group();\n\n        //add group to the map\n        map.addObject(group);\n\n        // add an event listener to each marker\n        // this shows the name for each marker, when it is clicked on\n        group.addEventListener('tap', function (evt) {\n            // create information field, add data to it and add to the UI\n            let information =  new window.H.ui.InfoBubble(evt.target.getGeometry(), {\n                content: evt.target.getData()\n            });\n            ui.addBubble(information);\n        }, false);\n\n        // add each marker to the group\n        for (const marker of markers) {\n            group.addObject(marker);\n        }\n\n        // set new map and UI\n        this.setState({ map: map, ui: ui});\n    }\n\n    /**\n     * Function, which is called when component has been mount. It creates the map.\n     */\n    componentDidMount() {\n        const H = window.H;\n        const platform = new H.service.Platform({\n            apikey: \"{DaTDB0YnlcvZRk8AF7tCZFOrsOBY4LVLyY2hWBOI3O0}\"\n        });\n\n        const defaultLayers = platform.createDefaultLayers();\n\n        // create map and set its positions\n        const map = new H.Map(\n            this.mapRef.current,\n            defaultLayers.vector.normal.map,\n            {\n                center: { lat: 50, lng: 5 },\n                zoom: 4,\n                pixelRatio: window.devicePixelRatio || 1\n            }\n        );\n\n        // add map events, to ensure zooming, etc.\n        const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));\n\n        // create UI, so the user is able to interact\n        const ui = H.ui.UI.createDefault(map, defaultLayers);\n\n        // set map and ui to state, so it can be used later\n        this.setState({ map: map, ui: ui});\n    }\n\n    /**\n     * Function, which is called when the component is going to be unmount. Disposes the map.\n     */\n    componentWillUnmount() {\n        this.state.map.dispose();\n    }\n\n    /**\n     * Function which renders the HTML elements.\n     * @returns {*}\n     */\n    render() {\n        return <div ref={this.mapRef} style={{height: '100vh'}} />;\n    }\n}","import logo from './logo.svg';\nimport './App.css';\nimport PositionsList from './PostionsList'\nimport {Map} from './Map'\nimport React, { Component } from 'react'\n\n/**\n * @author Tina LÃ¼the\n * DragDropPage Component, which contains the Map and PositionsList and makes one page and component out of them.\n */\nclass DragDropPage extends Component {\n\n    /**\n     * Constructor which gets props and also creates a reference for the Map-child.\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n    }\n\n    /**\n     * Callback to get the list of positions from the PositionsList child.\n     * @param positionsList\n     */\n    changedPositions = (positionsList) => {\n        // when positionsList, pass it to the map child\n        this.child.current.changePositions(positionsList);\n    };\n\n    /**\n     * Function which renders the HTML elements.\n     * @returns {*}\n     */\n    render() {\n        return (\n            <div>\n                <div className=\"drag-drop\">\n                    <PositionsList changedPositions={this.changedPositions}/>\n                </div>\n                <div className=\"map\">\n                    <Map ref={this.child}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DragDropPage;","import logo from './logo.svg';\nimport './App.css';\nimport PositionsList from './PostionsList'\nimport {Map} from './Map'\nimport React, { Component } from 'react'\nimport DragDropPage from \"./DragDropPage\";\n\n/**\n * @author Tina LÃ¼the\n * App Component, which contains the whole App.\n */\nclass App extends Component {\n\n    /**\n     * Function which renders the HTML elements.\n     * @returns {*}\n     */\n    render() {\n        return (\n            <div className=\"App\">\n                <DragDropPage/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}